<xf:xccdf-fragment xmlns="http://checklists.nist.gov/xccdf/1.2" xmlns:xf="http://fedorahosted.org/sce-community-content/wiki/XCCDF-fragment" xmlns:xhtml="http://www.w3.org/1999/xhtml">
  <Profile id="xccdf_org.open-scap.sce-community-content_profile_fedora-default">
    <select idref="xccdf_org.open-scap.sce-community-content_rule_services_openssh-sshd_disable_root_login" selected="false" />
  </Profile>

  <Profile id="xccdf_org.open-scap.sce-community-content_profile_nispom">
    <select idref="xccdf_org.open-scap.sce-community-content_rule_services_openssh-sshd_disable_empty_pws" selected="true" />
    <select idref="xccdf_org.open-scap.sce-community-content_rule_services_openssh-sshd_disable_root_login" selected="true" />
  </Profile>

  <Group id="xccdf_org.open-scap.sce-community-content_group_services_openssh" selected="true">
    <title>OpenSSH</title>

    <Rule id="xccdf_org.open-scap.sce-community-content_rule_services_openssh-home_ssh_sensitive" selected="true">
      <title>Check permission and owner of sensitive SSH files</title>
      <description>
        <xhtml:p>SSH related files containing sensitive data in the user directories must not be readable, writable or executable by other users.</xhtml:p>
        <xhtml:p>User-specific SSH files may contain sensitive information (i.e. private keys, passwords, etc.) that can compromise the users integrity.</xhtml:p>
        <xhtml:p>
          File(s) affected:
          <xhtml:ul>
            <xhtml:li>/home/*/.ssh/identity</xhtml:li>
            <xhtml:li>/home/*/.ssh/id_rsa</xhtml:li>
            <xhtml:li>/home/*/.ssh/id_dsa</xhtml:li>
            <xhtml:li>/home/*/.ssh/config</xhtml:li>
            <xhtml:li>/home/*/.ssh/random_seed</xhtml:li>
          </xhtml:ul>
        </xhtml:p>
      </description>
      <fix system="urn:xccdf:fix:script:sh">
      
        while read user home
        do
          if [ -e $home/.ssh/identity ]
          then
              chmod -R go-rwx $home/.ssh/identity
              chown -R $user $home/.ssh/identity
          fi
          if [ -e $home/.ssh/id_rsa ]
          then
              chmod -R go-rwx $home/.ssh/id_rsa
              chown -R $user $home/.ssh/id_rsa
          fi
          if [ -e $home/.ssh/id_dsa ]
          then
              chmod -R go-rwx $home/.ssh/id_dsa
              chown -R $user $home/.ssh/id_dsa
          fi
          if [ -e $home/.ssh/config ]
          then
              chmod -R go-rwx $home/.ssh/config
              chown -R $user $home/.ssh/config
          fi
          if [ -e $home/.ssh/random_seed ]
          then
              chmod -R go-rwx $home/.ssh/random_seed
              chown -R $user $home/.ssh/random_seed
          fi
        done &lt;&lt;_EOF
        $(grep -v /sbin/nologin /etc/passwd | cut -d: -f 1,6 | tr ':' ' ')
_EOF
      
      </fix>
      <check system="http://open-scap.org/page/SCE">
        <check-import import-name="stdout" />
        <check-content-ref href="home_ssh_sensitive.sh" />
      </check>
    </Rule>

    <Rule id="xccdf_org.open-scap.sce-community-content_rule_services_openssh-home_ssh_pubkey" selected="true">
      <title>Check SSH public key permissions and owner</title>
      <description>
        <xhtml:p>SSH public keys should not be writable by other users.</xhtml:p>
        <xhtml:p>Writable SSH public keys mean that other users may compromise the users data.</xhtml:p>
        <xhtml:p>
          File(s) affected:
          <xhtml:ul>
            <xhtml:li>/home/*/.ssh</xhtml:li>
            <xhtml:li>/home/*/.ssh/authorized_keys</xhtml:li>
            <xhtml:li>/home/*/.ssh/environment</xhtml:li>
            <xhtml:li>/home/*/.ssh/known_hosts</xhtml:li>
            <xhtml:li>/home/*/.ssh/rc</xhtml:li>
          </xhtml:ul>
        </xhtml:p>
      </description>
      <fix system="urn:xccdf:fix:script:sh">
      
        while read user home
        do
          if [ -e $home/.ssh ]
          then
              chmod -R go-w $home/.ssh
              chown -R $user $home/.ssh
          fi
          if [ -e $home/.ssh/authorized_keys ]
          then
              chmod -R go-w $home/.ssh/authorized_keys
              chown -R $user $home/.ssh/authorized_keys
          fi
          if [ -e $home/.ssh/environment ]
          then
              chmod -R go-w $home/.ssh/environment
              chown -R $user $home/.ssh/environment
          fi
          if [ -e $home/.ssh/known_hosts ]
          then
              chmod -R go-w $home/.ssh/known_hosts
              chown -R $user $home/.ssh/known_hosts
          fi
          if [ -e $home/.ssh/rc ]
          then
              chmod -R go-w $home/.ssh/rc
              chown -R $user $home/.ssh/rc
          fi
        done &lt;&lt;_EOF
        $(grep -v /sbin/nologin /etc/passwd | cut -d: -f 1,6 | tr ':' ' ')
_EOF
      
      </fix>
      <check system="http://open-scap.org/page/SCE">
        <check-import import-name="stdout" />
        <check-content-ref href="home_ssh_pubkey.sh" />
      </check>
    </Rule>
     
    <Rule id="xccdf_org.open-scap.sce-community-content_rule_services_openssh-sshd_disable_empty_pws" selected="true">
      <title>Check if empty passwords are disabled in opensshd</title>
      <description>
        <xhtml:p>The opensshd configuration file should not allow empty passwords.</xhtml:p>
        <xhtml:p>Might allow the attacker to gain direct access to the machine by just guessing a username.</xhtml:p>
        <xhtml:p>
          File(s) affected:
          <xhtml:ul>
            <xhtml:li>/etc/ssh/sshd_config</xhtml:li>
          </xhtml:ul>
        </xhtml:p>
      </description>
      <fix system="urn:xccdf:fix:script:sh">
      
        # Check if PermitEmptyPasswords is enabled (commented lines will be replaced too)
        if grep -q PermitEmptyPasswords /etc/ssh/sshd_config
        then
          sed -i 's|^.*PermitEmptyPasswords.*$|PermitEmptyPasswords no|ig' /etc/ssh/sshd_config
        else
          echo 'PermitEmptyPasswords no' &gt;&gt; /etc/ssh/sshd_config
        fi

        service sshd try-restart
      </fix>
      <check system="http://open-scap.org/page/SCE">
        <check-import import-name="stdout" />
        <check-content-ref href="sshd_disable_empty_pws.sh" />
      </check>
    </Rule>

    <Rule id="xccdf_org.open-scap.sce-community-content_rule_services_openssh-sshd_disable_root_login" selected="true">
      <title>Check if root login is disabled in opensshd</title>
      <description>
        <xhtml:p>The opensshd configuration file should not allow root login.</xhtml:p>
        <xhtml:p>The 'root' username is a logical target for bruteforce attacks. Having to login as a different user and then sudo involves 2-step authorization.</xhtml:p>
        <xhtml:p>
          File(s) affected:
          <xhtml:ul>
            <xhtml:li>/etc/ssh/sshd_config</xhtml:li>
          </xhtml:ul>
        </xhtml:p>
      </description>
      <fix system="urn:xccdf:fix:script:sh">
      
        # Check if PermitRootLogin is enabled (commented lines will be replaced too)
        if grep -q PermitRootLogin /etc/ssh/sshd_config
        then
          sed -i 's|^.*PermitRootLogin.*$|PermitRootLogin no|ig' /etc/ssh/sshd_config
        fi

        service sshd try-restart
      
      </fix>
      <check system="http://open-scap.org/page/SCE">
        <check-import import-name="stdout" />
        <check-content-ref href="sshd_disable_root_login.sh" />
      </check>
    </Rule>
  </Group>
</xf:xccdf-fragment>